const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient()

const commonWestgardRules = [
  {
    code: '1-2s',
    name: '1-2s',
    description: 'M·ªôt ƒëi·ªÉm n·∫±m ngo√†i ¬±2SD',
    severity: 'error',
    type: 'single',
    windowSize: 1,
    thresholdSd: 2.0,
    consecutivePoints: 1,
    sameSide: false,
    oppositeSides: false,
    sumAbsZGt: null,
    expression: 'abs(z) > 2',
    customMessage: 'C·∫£nh b√°o: M·ªôt ƒëi·ªÉm QC v∆∞·ª£t ra ngo√†i gi·ªõi h·∫°n ¬±2SD. Ki·ªÉm tra l·∫°i thao t√°c v√† ƒëi·ªÅu ki·ªán m√¥i tr∆∞·ªùng.',
    orderIndex: 1,
    params: JSON.stringify({
      causes: [
        'Sai s·ªë ng·∫´u nhi√™n',
        'L·ªói thi·∫øt b·ªã',
        'Thao t√°c k·ªπ thu·∫≠t',
        'ƒêi·ªÅu ki·ªán m√¥i tr∆∞·ªùng thay ƒë·ªïi',
        'M·∫´u QC c√≥ v·∫•n ƒë·ªÅ'
      ],
      correctiveActions: [
        'Ki·ªÉm tra l·∫°i thao t√°c',
        'Hi·ªáu chu·∫©n thi·∫øt b·ªã',
        'Ch·∫°y l·∫°i m·∫´u QC',
        'Ki·ªÉm tra ƒëi·ªÅu ki·ªán m√¥i tr∆∞·ªùng',
        'Thay m·∫´u QC m·ªõi'
      ]
    }),
    isActive: true
  },
  {
    code: '1-3s',
    name: '1-3s',
    description: 'M·ªôt ƒëi·ªÉm n·∫±m ngo√†i ¬±3SD',
    severity: 'critical',
    type: 'single',
    windowSize: 1,
    thresholdSd: 3.0,
    consecutivePoints: 1,
    sameSide: false,
    oppositeSides: false,
    sumAbsZGt: null,
    expression: 'abs(z) > 3',
    customMessage: 'NGHI√äM TR·ªåNG: M·ªôt ƒëi·ªÉm QC v∆∞·ª£t ra ngo√†i gi·ªõi h·∫°n ¬±3SD. D·ª´ng x√©t nghi·ªám ngay l·∫≠p t·ª©c!',
    orderIndex: 2,
    params: JSON.stringify({
      causes: [
        'L·ªói nghi√™m tr·ªçng c·ªßa thi·∫øt b·ªã',
        'H·ªèng thi·∫øt b·ªã',
        'M·∫´u QC h·ªèng',
        'Sai hi·ªáu chu·∫©n',
        'L·ªói h·ªá th·ªëng'
      ],
      correctiveActions: [
        'D·ª™NG x√©t nghi·ªám m·∫´u b·ªánh nh√¢n',
        'Ki·ªÉm tra to√†n b·ªô h·ªá th·ªëng',
        'Hi·ªáu chu·∫©n l·∫°i thi·∫øt b·ªã',
        'Thay m·∫´u QC m·ªõi',
        'X√°c nh·∫≠n tr∆∞·ªõc khi ti·∫øp t·ª•c'
      ]
    }),
    isActive: true
  },
  {
    code: '2-2s',
    name: '2-2s',
    description: 'Hai ƒëi·ªÉm li√™n ti·∫øp c√πng ph√≠a ¬±2SD',
    severity: 'error',
    type: 'multiple',
    windowSize: 2,
    thresholdSd: 2.0,
    consecutivePoints: 2,
    sameSide: true,
    oppositeSides: false,
    sumAbsZGt: null,
    expression: 'consecutive_same_side(z, 2) > 2',
    customMessage: 'C·∫£nh b√°o: Hai ƒëi·ªÉm QC li√™n ti·∫øp c√πng v∆∞·ª£t ra ngo√†i ¬±2SD v·ªÅ c√πng m·ªôt ph√≠a. C√≥ th·ªÉ c√≥ xu h∆∞·ªõng l·ªách.',
    orderIndex: 3,
    params: JSON.stringify({
      causes: [
        'Xu h∆∞·ªõng l·ªách (systematic error)',
        'Thi·∫øt b·ªã drift',
        'M√¥i tr∆∞·ªùng thay ƒë·ªïi',
        'Reagent c√≥ v·∫•n ƒë·ªÅ',
        'Hi·ªáu chu·∫©n kh√¥ng ch√≠nh x√°c'
      ],
      correctiveActions: [
        'Ki·ªÉm tra xu h∆∞·ªõng',
        'Hi·ªáu chu·∫©n l·∫°i thi·∫øt b·ªã',
        'Ki·ªÉm tra m√¥i tr∆∞·ªùng',
        'Thay reagent m·ªõi',
        'Theo d√µi th√™m'
      ]
    }),
    isActive: true
  },
  {
    code: 'R-4s',
    name: 'R-4s',
    description: 'Hai ƒëi·ªÉm li√™n ti·∫øp c√°ch nhau >4SD',
    severity: 'critical',
    type: 'multiple',
    windowSize: 2,
    thresholdSd: null,
    consecutivePoints: 2,
    sameSide: false,
    oppositeSides: true,
    sumAbsZGt: 4.0,
    expression: 'abs(z1 - z2) > 4',
    customMessage: 'NGHI√äM TR·ªåNG: Kho·∫£ng c√°ch gi·ªØa hai ƒëi·ªÉm QC li√™n ti·∫øp v∆∞·ª£t qu√° 4SD. Sai s·ªë ng·∫´u nhi√™n l·ªõn!',
    orderIndex: 4,
    params: JSON.stringify({
      causes: [
        'Sai s·ªë ng·∫´u nhi√™n l·ªõn',
        'L·ªói thi·∫øt b·ªã',
        'Sao ch√©p k·∫øt qu·∫£ sai',
        'Ch·∫•t l∆∞·ª£ng h√≥a ch·∫•t k√©m',
        'ƒêi·ªÅu ki·ªán ph√≤ng x√©t nghi·ªám kh√¥ng ƒë·∫£m b·∫£o'
      ],
      correctiveActions: [
        'Xem l·∫°i nguy√™n nh√¢n',
        'Ch·∫°y l·∫°i ki·ªÉm tra ƒëi·ªÉm vi ph·∫°m',
        'Ki·ªÉm tra thi·∫øt b·ªã',
        'Thay h√≥a ch·∫•t m·ªõi',
        'C·∫£i thi·ªán ƒëi·ªÅu ki·ªán ph√≤ng x√©t nghi·ªám'
      ]
    }),
    isActive: true
  },
  {
    code: '4-1s',
    name: '4-1s',
    description: 'B·ªën ƒëi·ªÉm li√™n ti·∫øp c√πng ph√≠a ¬±1SD',
    severity: 'warning',
    type: 'multiple',
    windowSize: 4,
    thresholdSd: 1.0,
    consecutivePoints: 4,
    sameSide: true,
    oppositeSides: false,
    sumAbsZGt: null,
    expression: 'consecutive_same_side(z, 4) > 1',
    customMessage: 'C·∫£nh b√°o: B·ªën ƒëi·ªÉm QC li√™n ti·∫øp c√πng n·∫±m v·ªÅ m·ªôt ph√≠a so v·ªõi mean. C√≥ xu h∆∞·ªõng nh·∫π.',
    orderIndex: 5,
    params: JSON.stringify({
      causes: [
        'Xu h∆∞·ªõng nh·∫π',
        'Thi·∫øt b·ªã c·∫ßn hi·ªáu chu·∫©n',
        'M√¥i tr∆∞·ªùng thay ƒë·ªïi nh·∫π',
        'Reagent b·∫Øt ƒë·∫ßu xu·ªëng c·∫•p',
        'Drift nh·ªè c·ªßa thi·∫øt b·ªã'
      ],
      correctiveActions: [
        'Theo d√µi xu h∆∞·ªõng',
        'L√™n l·ªãch hi·ªáu chu·∫©n',
        'Ki·ªÉm tra m√¥i tr∆∞·ªùng',
        'Theo d√µi ch·∫•t l∆∞·ª£ng reagent',
        'Ghi ch√©p ƒë·ªÉ ph√¢n t√≠ch'
      ]
    }),
    isActive: true
  },
  {
    code: '10x',
    name: '10x',
    description: 'M∆∞·ªùi ƒëi·ªÉm li√™n ti·∫øp c√πng ph√≠a mean',
    severity: 'warning',
    type: 'multiple',
    windowSize: 10,
    thresholdSd: null,
    consecutivePoints: 10,
    sameSide: true,
    oppositeSides: false,
    sumAbsZGt: null,
    expression: 'consecutive_same_side(z, 10)',
    customMessage: 'C·∫£nh b√°o: M∆∞·ªùi ƒëi·ªÉm QC li√™n ti·∫øp c√πng n·∫±m v·ªÅ m·ªôt ph√≠a so v·ªõi mean. Thi·∫øt b·ªã c√≥ drift.',
    orderIndex: 6,
    params: JSON.stringify({
      causes: [
        'Thi·∫øt b·ªã drift',
        'M√¥i tr∆∞·ªùng kh√¥ng ·ªïn ƒë·ªãnh',
        'Reagent xu·ªëng c·∫•p',
        'Hi·ªáu chu·∫©n kh√¥ng ch√≠nh x√°c',
        'Thi·∫øt b·ªã c·∫ßn b·∫£o tr√¨'
      ],
      correctiveActions: [
        'Hi·ªáu chu·∫©n thi·∫øt b·ªã',
        'Ki·ªÉm tra m√¥i tr∆∞·ªùng',
        'Thay reagent m·ªõi',
        'L√™n l·ªãch b·∫£o tr√¨',
        'Theo d√µi xu h∆∞·ªõng d√†i h·∫°n'
      ]
    }),
    isActive: true
  },
  {
    code: '2-3s',
    name: '2-3s',
    description: 'Hai ƒëi·ªÉm li√™n ti·∫øp c√πng ph√≠a ¬±3SD',
    severity: 'critical',
    type: 'multiple',
    windowSize: 2,
    thresholdSd: 3.0,
    consecutivePoints: 2,
    sameSide: true,
    oppositeSides: false,
    sumAbsZGt: null,
    expression: 'consecutive_same_side(z, 2) > 3',
    customMessage: 'NGHI√äM TR·ªåNG: Hai ƒëi·ªÉm QC li√™n ti·∫øp c√πng v∆∞·ª£t ra ngo√†i ¬±3SD. L·ªói h·ªá th·ªëng nghi√™m tr·ªçng!',
    orderIndex: 7,
    params: JSON.stringify({
      causes: [
        'L·ªói h·ªá th·ªëng nghi√™m tr·ªçng',
        'Thi·∫øt b·ªã h·ªèng ho√†n to√†n',
        'M·∫´u QC h·ªèng',
        'Sai hi·ªáu chu·∫©n nghi√™m tr·ªçng',
        'L·ªói ph·∫ßn m·ªÅm'
      ],
      correctiveActions: [
        'D·ª™NG x√©t nghi·ªám ngay l·∫≠p t·ª©c',
        'Ki·ªÉm tra to√†n b·ªô h·ªá th·ªëng',
        'Thay thi·∫øt b·ªã n·∫øu c·∫ßn',
        'Thay m·∫´u QC m·ªõi',
        'Hi·ªáu chu·∫©n l·∫°i t·ª´ ƒë·∫ßu'
      ]
    }),
    isActive: true
  },
  {
    code: '4-1s-2s',
    name: '4-1s-2s',
    description: 'B·ªën ƒëi·ªÉm li√™n ti·∫øp c√πng ph√≠a ¬±1SD v√† ¬±2SD',
    severity: 'warning',
    type: 'multiple',
    windowSize: 4,
    thresholdSd: 1.0,
    consecutivePoints: 4,
    sameSide: true,
    oppositeSides: false,
    sumAbsZGt: 2.0,
    expression: 'consecutive_same_side(z, 4) > 1 AND consecutive_same_side(z, 4) < 2',
    customMessage: 'C·∫£nh b√°o: B·ªën ƒëi·ªÉm QC li√™n ti·∫øp c√≥ xu h∆∞·ªõng l·ªách nh·∫π nh∆∞ng ch∆∞a nghi√™m tr·ªçng.',
    orderIndex: 8,
    params: JSON.stringify({
      causes: [
        'Xu h∆∞·ªõng l·ªách nh·∫π',
        'Thi·∫øt b·ªã b·∫Øt ƒë·∫ßu drift',
        'M√¥i tr∆∞·ªùng thay ƒë·ªïi',
        'Reagent b·∫Øt ƒë·∫ßu xu·ªëng c·∫•p',
        'Hi·ªáu chu·∫©n c·∫ßn ƒëi·ªÅu ch·ªânh'
      ],
      correctiveActions: [
        'Theo d√µi xu h∆∞·ªõng',
        'Ki·ªÉm tra hi·ªáu chu·∫©n',
        'Theo d√µi m√¥i tr∆∞·ªùng',
        'L√™n l·ªãch b·∫£o tr√¨',
        'Ghi ch√©p ƒë·ªÉ ph√¢n t√≠ch'
      ]
    }),
    isActive: true
  }
]

async function seedWestgardRules() {
  try {
    console.log('üå± B·∫Øt ƒë·∫ßu seed Westgard rules...')
    
    // L·∫•y department ƒë·∫ßu ti√™n (ho·∫∑c t·∫°o default)
    let department = await prisma.department.findFirst()
    if (!department) {
      console.log('üìù T·∫°o department m·∫∑c ƒë·ªãnh...')
      department = await prisma.department.create({
        data: {
          code: 'DEFAULT',
          name: 'Ph√≤ng x√©t nghi·ªám m·∫∑c ƒë·ªãnh'
        }
      })
    }
    
    // L·∫•y QC levels
    let qcLevels = await prisma.qcLevel.findMany()
    if (qcLevels.length === 0) {
      console.log('üìù T·∫°o QC levels m·∫∑c ƒë·ªãnh...')
      await prisma.qcLevel.createMany({
        data: [
          { name: 'QC1', departmentId: department.id },
          { name: 'QC2', departmentId: department.id },
          { name: 'QC3', departmentId: department.id }
        ]
      })
      qcLevels = await prisma.qcLevel.findMany()
    }
    
    console.log(`üìä T√¨m th·∫•y ${qcLevels.length} QC levels:`, qcLevels.map(q => q.name))
    
    // T·∫°o Westgard rules
    for (const ruleData of commonWestgardRules) {
      console.log(`üìù T·∫°o rule: ${ruleData.name}...`)
      
      const rule = await prisma.westgardRule.upsert({
        where: { code: ruleData.code },
        update: {
          ...ruleData,
          departmentId: department.id,
          updatedBy: 'System Seeder'
        },
        create: {
          ...ruleData,
          departmentId: department.id,
          createdBy: 'System Seeder'
        }
      })
      
      // Connect QC levels to the rule
      await prisma.westgardRule.update({
        where: { id: rule.id },
        data: {
          qcLevels: {
            connect: qcLevels.map(qcLevel => ({ id: qcLevel.id }))
          }
        }
      })
      
      console.log(`‚úÖ ƒê√£ t·∫°o rule: ${rule.name} (ID: ${rule.id})`)
    }
    
    console.log('üéâ Ho√†n th√†nh seed Westgard rules!')
    console.log(`üìä ƒê√£ t·∫°o ${commonWestgardRules.length} rules`)
    console.log(`üîó M·ªói rule ƒë∆∞·ª£c √°p d·ª•ng cho ${qcLevels.length} QC levels`)
    
  } catch (error) {
    console.error('‚ùå L·ªói khi seed Westgard rules:', error)
    throw error
  } finally {
    await prisma.$disconnect()
  }
}

// Ch·∫°y seed
if (require.main === module) {
  seedWestgardRules()
    .then(() => {
      console.log('‚úÖ Seed ho√†n th√†nh!')
      process.exit(0)
    })
    .catch((error) => {
      console.error('‚ùå Seed th·∫•t b·∫°i:', error)
      process.exit(1)
    })
}

module.exports = { seedWestgardRules }
